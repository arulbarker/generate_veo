import streamlit as st
import os
import time
import base64
import requests
from io import BytesIO
from PIL import Image
from google import genai
from google.genai import types
from dotenv import load_dotenv

# Load environment variables
load_dotenv('.env.local')

# Constants
VIDEO_LOADING_MESSAGES = [
    "Starting video generation process...",
    "Analyzing your prompt...",
    "Processing image input...",
    "Initializing VEO model...",
    "Generating video frames...",
    "Applying visual effects...",
    "Rendering final video...",
    "Almost ready..."
]

IMAGE_LOADING_MESSAGES = [
    "Starting image generation process...",
    "Analyzing your prompt...",
    "Processing reference image...",
    "Initializing Nano Banana model...",
    "Generating creative imagery...",
    "Applying artistic effects...",
    "Finalizing image details...",
    "Almost ready..."
]

def init_session_state():
    """Initialize session state variables"""
    if 'video_url' not in st.session_state:
        st.session_state.video_url = None
    if 'is_loading' not in st.session_state:
        st.session_state.is_loading = False
    if 'error' not in st.session_state:
        st.session_state.error = None
    if 'api_key' not in st.session_state:
        st.session_state.api_key = ""
    if 'api_key_saved' not in st.session_state:
        st.session_state.api_key_saved = False
    if 'current_model' not in st.session_state:
        st.session_state.current_model = None

def image_to_base64(image):
    """Convert PIL image to base64"""
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()

def generate_video(prompt, aspect_ratio, sound_enabled, resolution, image_file=None, api_key=None, model_name="veo-2.0-generate-001"):
    """Generate video using VEO-3 API"""
    if not api_key:
        raise Exception("API Key is required for video generation")
    
    try:
        # Initialize genai client with API key
        client = genai.Client(api_key=api_key)
        
        # Prepare generation config
        config = types.GenerateVideosConfig()
        
        # Handle different models
        if model_name == "gemini-2.5-flash-image-preview":
            # Nano Banana for text-to-image or image-to-image
            print(f"Debug: Using Nano Banana with prompt: {prompt}")
            
            # Prepare content parts
            content_parts = [{"text": prompt}]
            
            # Add image if provided (for image-to-image)
            if image_file:
                print("Debug: Image provided - using image-to-image mode")
                content_parts.insert(0, {
                    "inlineData": {
                        "data": image_to_base64(image_file),
                        "mimeType": "image/png",
                    },
                })
            else:
                print("Debug: No image provided - using text-to-image mode")
            
            response = client.models.generate_content(
                model=model_name,
                contents={
                    "parts": content_parts,
                },
                config={
                    "responseModalities": ["IMAGE", "TEXT"],
                }
            )
            
            print(f"Debug: Nano Banana response: {response}")
            
            # Process image response
            if response.candidates and len(response.candidates) > 0:
                for part in response.candidates[0].content.parts:
                    print(f"Debug: Part: {part}")
                    if hasattr(part, 'inlineData') and part.inlineData:
                        base64_image = part.inlineData.data
                        mime_type = part.inlineData.mimeType
                        print(f"Debug: Found image data, mime_type: {mime_type}")
                        
                        # Convert to bytes and return
                        import base64
                        image_bytes = base64.b64decode(base64_image)
                        print(f"Debug: Image bytes length: {len(image_bytes)}")
                        return image_bytes
            
            raise Exception("No image generated by Nano Banana model")
        
        else:
            # Video generation with VEO models
            generation_options = {
                "model": model_name,
                "prompt": prompt,
                "config": {
                    "numberOfVideos": 1,
                }
            }
        
            # Add image if provided
            if image_file:
                image_base64 = image_to_base64(image_file)
                generation_options["image"] = {
                    "imageBytes": image_base64,
                    "mimeType": "image/png"
                }
            
            print(f"Debug: Using model {model_name}")
            print(f"Debug: Generation options: {generation_options}")
            
            operation = client.models.generate_videos(**generation_options)
        
        # Poll the operation status until the video is ready
        max_wait_time = 300  # 5 minutes max
        wait_time = 0
        
        while not operation.done and wait_time < max_wait_time:
            time.sleep(10)
            wait_time += 10
            try:
                operation = client.operations.get(operation)
                print(f"Debug: Operation status - done: {operation.done}")
            except Exception as e:
                print(f"Debug: Polling error: {e}")
                break
        
        if not operation.done:
            raise Exception("Video generation timed out after 5 minutes")
        
        # Get the generated video 
        print(f"Debug: Operation result: {operation.result}")
        
        if hasattr(operation.result, 'generated_videos') and operation.result.generated_videos:
            generated_video = operation.result.generated_videos[0]
            print(f"Debug: Generated video: {generated_video}")
            
            # Try to get URI from video
            if hasattr(generated_video, 'video') and hasattr(generated_video.video, 'uri'):
                download_link = generated_video.video.uri
                print(f"Debug: Download link: {download_link}")
                
                # Download video using the approach from reference
                video_url = f"{download_link}&key={api_key}"
                response = requests.get(video_url)
                
                if not response.ok:
                    raise Exception(f"Failed to download video. Status: {response.status_code}")
                
                return response.content
            else:
                # Try direct download method
                try:
                    video_content = client.files.download(file=generated_video.video)
                    return video_content
                except Exception as e:
                    print(f"Debug: Direct download failed: {e}")
                    raise Exception(f"Could not download video: {e}")
        else:
            print(f"Debug: No videos in result: {operation.result}")
            raise Exception("No video was generated")
            
    except Exception as e:
        if "API_KEY_INVALID" in str(e) or "invalid" in str(e).lower():
            raise Exception("Invalid API Key. Please check your API key from Google AI Studio.")
        elif "not found" in str(e).lower() or "404" in str(e):
            raise Exception("VEO-3 model not accessible. Make sure you have access to VEO-3 preview model.")
        else:
            raise Exception(f"Video generation failed: {str(e)}")

def main():
    st.set_page_config(
        page_title="VEO3 Video Generator",
        page_icon="🎬",
        layout="wide"
    )
    
    init_session_state()
    
    # Header
    st.title("🎬 VEO3 Video Generator")
    st.markdown("Generate amazing videos with AI using Google's VEO-3 model")
    
    # Sidebar for configuration
    with st.sidebar:
        st.header("⚙️ Configuration")
        
        # API Key section
        st.subheader("🔑 API Key")
        
        # Check for API key from environment first
        env_api_key = os.getenv('GEMINI_API_KEY')
        
        # API Key input field
        api_key_input = st.text_input(
            "Enter your Gemini API Key:",
            value=st.session_state.api_key,
            type="password",
            help="Get your API key from Google AI Studio"
        )
        
        # Save API Key button
        if st.button("💾 Save API Key"):
            if api_key_input.strip():
                st.session_state.api_key = api_key_input.strip()
                st.session_state.api_key_saved = True
                st.success("✅ API Key saved successfully!")
                st.rerun()
            else:
                st.error("❌ Please enter a valid API key")
        
        # API Key status
        if st.session_state.api_key_saved and st.session_state.api_key:
            st.success("✅ API Key is ready")
            current_api_key = st.session_state.api_key
        elif env_api_key:
            st.success("✅ API Key loaded from environment")
            current_api_key = env_api_key
        else:
            st.error("❌ No API Key found. Please enter your API key above.")
            st.stop()
        
        st.divider()
        
        # Model selection
        st.subheader("🤖 Model Selection")
        selected_model = st.selectbox(
            "Choose AI Model",
            ["veo-2.0-generate-001", "veo-3.0-generate-preview", "gemini-2.5-flash-image-preview"],
            index=0,
            help="VEO-2: Stable video generation | VEO-3: Latest video model (Preview) | Nano Banana: Text-to-Image & Image-to-Image"
        )
        
        # Show model info
        if selected_model == "gemini-2.5-flash-image-preview":
            st.info("🖼️ Nano Banana generates images from text prompts. You can also upload an image as reference for image editing.")
        
        st.divider()
        
        aspect_ratio = st.selectbox(
            "Aspect Ratio",
            ["16:9", "9:16"],
            index=0
        )
        
        resolution = st.selectbox(
            "Resolution",
            ["720p", "1080p"],
            index=1
        )
        
        sound_enabled = st.checkbox(
            "Enable Sound",
            value=True
        )
    
    # Main content
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("📝 Input")
        
        # Prompt input - dynamic label based on selected model
        prompt_label = "Image Prompt" if selected_model == "gemini-2.5-flash-image-preview" else "Video Prompt"
        prompt_help = "Describe the image you want to generate or edit" if selected_model == "gemini-2.5-flash-image-preview" else "Describe the video you want to generate"
        default_prompt = "A majestic lion in a forest, digital art style" if selected_model == "gemini-2.5-flash-image-preview" else "A majestic lion roaring on a cliff at sunset, cinematic lighting"
        
        prompt = st.text_area(
            prompt_label,
            value=default_prompt,
            height=100,
            help=prompt_help
        )
        
        # Image upload
        st.subheader("🖼️ Reference Image (Optional)")
        uploaded_file = st.file_uploader(
            "Upload an image to use as reference",
            type=['png', 'jpg', 'jpeg'],
            help="Upload an image to guide the video generation"
        )
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="Uploaded Image", use_container_width=True)
        
        # Generate button - dynamic label based on model
        button_label = "🖼️ Generate Image" if selected_model == "gemini-2.5-flash-image-preview" else "🎬 Generate Video"
        
        if st.button(button_label, type="primary", disabled=st.session_state.is_loading):
            if not prompt.strip():
                st.error("Please enter a prompt")
            else:
                # Clear previous results if model changed
                if st.session_state.current_model != selected_model:
                    st.session_state.video_url = None
                    st.session_state.current_model = selected_model
                
                st.session_state.is_loading = True
                st.session_state.error = None
                if st.session_state.current_model != selected_model:
                    st.session_state.video_url = None
                st.rerun()
    
    with col2:
        output_header = "🖼️ Generated Image" if selected_model == "gemini-2.5-flash-image-preview" else "🎥 Generated Video"
        st.header(output_header)
        
        if st.session_state.is_loading:
            # Show loading animation
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                # Use appropriate loading messages based on model
                loading_messages = IMAGE_LOADING_MESSAGES if selected_model == "gemini-2.5-flash-image-preview" else VIDEO_LOADING_MESSAGES
                
                # Simulate progress with loading messages
                for i, message in enumerate(loading_messages):
                    status_text.text(message)
                    progress_bar.progress((i + 1) / len(loading_messages))
                    time.sleep(2)
                
                # Generate video
                image_file = None
                if uploaded_file is not None:
                    image_file = Image.open(uploaded_file)
                
                video_content = generate_video(
                    prompt=prompt,
                    aspect_ratio=aspect_ratio,
                    sound_enabled=sound_enabled,
                    resolution=resolution,
                    image_file=image_file,
                    api_key=current_api_key,
                    model_name=selected_model
                )
                
                # Save video temporarily
                st.session_state.video_url = video_content
                st.session_state.is_loading = False
                progress_bar.progress(1.0)
                status_text.text("✅ Video generation complete!")
                st.rerun()
                
            except Exception as e:
                st.session_state.error = str(e)
                st.session_state.is_loading = False
                st.rerun()
        
        elif st.session_state.error:
            st.error(f"❌ Error: {st.session_state.error}")
        
        elif st.session_state.video_url:
            st.success("✅ Content generated successfully!")
            
            # Check if it's image (Nano Banana) or video
            if st.session_state.current_model == "gemini-2.5-flash-image-preview":
                # Display image
                try:
                    st.image(st.session_state.video_url, caption="Generated Image", use_container_width=True)
                    
                    # Download button for image
                    st.download_button(
                        label="💾 Download Image",
                        data=st.session_state.video_url,
                        file_name="generated_image.png",
                        mime="image/png"
                    )
                except Exception as e:
                    st.error(f"Error displaying image: {e}")
                    st.text(f"Data type: {type(st.session_state.video_url)}")
                    st.text(f"Data length: {len(st.session_state.video_url) if st.session_state.video_url else 'None'}")
            else:
                # Display video
                st.video(st.session_state.video_url)
                
                # Download button for video
                st.download_button(
                    label="💾 Download Video",
                    data=st.session_state.video_url,
                    file_name="generated_video.mp4",
                    mime="video/mp4"
                )
        
        else:
            info_message = "👆 Enter a prompt and click 'Generate Image' to get started" if selected_model == "gemini-2.5-flash-image-preview" else "👆 Enter a prompt and click 'Generate Video' to get started"
            st.info(info_message)

if __name__ == "__main__":
    main()